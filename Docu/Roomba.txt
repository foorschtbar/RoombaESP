/* BOARD SETTINGS
* Board : NodeMCU 1.0
 */

// Remote debug over telnet - not recommended for production, only for development
#include "RemoteDebug.h"        //https://github.com/JoaoLopesF/RemoteDebug

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPUpdateServer.h>
#include <EEPROM.h>
#include <SoftwareSerial.h>
#include "myTypes.h"          // Include my type definitions (must be in a separate file!)

// Pins
#define PinWiFiLED    D2  // Blue/Wifi LED
#define SERIAL_RX     D5  // pin for SoftwareSerial RX
#define SERIAL_TX     D6  // pin for SoftwareSerial TX
#define Wake_Pin      D1
#define PinPushBtn    D3


char sensorbytes[10];
#define CHARGE_STATE (sensorbytes[0])
#define VOLTAGE ((sensorbytes[1] << 8) + sensorbytes[2])
#define CURRENT (signed short int)((sensorbytes[3] << 8) + sensorbytes[4])
#define TEMP (sensorbytes[5])
#define CHARGE ((sensorbytes[6] << 8) + sensorbytes[7])
#define CAPACITY ((sensorbytes[8] << 8) + sensorbytes[9])


//Softserial
SoftwareSerial Roomba(SERIAL_RX, SERIAL_TX); // (RX, TX. inverted, buffer)

// optional parameters in function prototype
void HTMLHeader(char* section, int refresh = 0, char* url = "/");

const char* firmware = "0.1";
const char compile_date[] = __DATE__ " " __TIME__;

// Config
int cfgStart = 0;             // Start address in EEPROM for structure 'cfg'
configData_t cfg;             // Instance 'cfg' is a global variable with 'configData_t' structure now
bool configIsDefault = false;   // true if no valid config found in eeprom and defaults settings loaded

const long longPressTime = 10000;

ESP8266WebServer server ( 80 );
ESP8266HTTPUpdateServer httpUpdater;
RemoteDebug Debug;

// Variables will change
int wifiledState = LOW;
unsigned long previousMillis = 0;         // will store last time LED was updated
unsigned long buttonTimer = 0;            // will store how long button was pressed

// buffers
String html;
char buff[255];

// Variables wont change
enum commands { RMB_WAKE, RMB_START, RMB_MAX, RMB_STOP, RMB_SPOT, RMB_DOCK };
const long wifiledoffinterval = 200;           // interval at which to blink (milliseconds)

// Button handling
bool inp_status = 1;

void setup ( void ) {

  Serial.begin(115200);
  Roomba.begin(115200);
  delay(200);

   // Setting the I/O pin modes
  pinMode(PinPushBtn, INPUT);
  pinMode(PinWiFiLED, OUTPUT);
  pinMode(SERIAL_RX, INPUT);
  pinMode(SERIAL_TX, OUTPUT);
  pinMode(Wake_Pin, OUTPUT);
  digitalWrite(Wake_Pin,LOW);

  // Load Config
  loadConfig();

  // Begin Wifi
  WiFi.mode(WIFI_OFF);
  
  // AP or Infrastructire mode
  if(configIsDefault) {
    // Start AP
    Serial.println("configIsDefault: AP Mode");
    WiFi.softAP("Roomba", "");
    digitalWrite(PinWiFiLED, HIGH);
  } else {
    // Connecting to a WiFi network
    Serial.println("configIsNotDefault: Connecting to WiFi");
    WiFi.mode(WIFI_STA);
    if(strcmp(cfg.hostname, "") != 0) {
      WiFi.hostname(cfg.hostname);
    }
    WiFi.begin(cfg.wifi_ssid, cfg.wifi_psk);

    while (WiFi.status() != WL_CONNECTED) {
      delay(250);
      Serial.print(".");
  
      // Blink WiFi LED
      if (wifiledState == LOW) {
        wifiledState = HIGH;
      } else {
        wifiledState = LOW;
      }
      digitalWrite(PinWiFiLED, wifiledState);

      // handleButton
      handleButton();
    }

    Serial.println();
    Serial.print("WiFi connected with ip ");
    Serial.println(WiFi.localIP());
    digitalWrite(PinWiFiLED, 1);

    WiFi.printDiag(Serial);
  }

  // Telnet debug
  if (cfg.telnet) {
    Debug.begin(WiFi.hostname()); // Initiaze the telnet server
    Debug.setSerialEnabled(true); // All messages too send to serial too, and can be see in serial monitor
    Debug.setResetCmdEnabled(true); // Enable the reset command
  }
  // Arduino OTA Update
  httpUpdater.setup(&server, "/dofwupdate", cfg.admin_username, cfg.admin_password);

  server.on("/", handleRoot );

  server.onNotFound(handleNotFound);

//  server.on("/api/on", []() {
//    handleAPI(CMD_ON);
//  });
//  server.on("/api/off", []() {
//    handleAPI(CMD_OFF);
//  });
//  server.on("/api/status", []() {
//    handleAPI(CMD_STATUS);
//  });
  server.on("/settings", []() { handleSettings(); });
  server.on( "/reboot", []() { handleReboot(); });
  server.on( "/switch", []() { handleSwitch(); });
  server.on( "/status", []() { handleStatus(); });
  server.on( "/fwupdate", []() { handleFWUpdate(); });
  server.on( "/wifiscan", []() { handleWiFiScan(); });
  
  server.begin();
  rdebugVln( "HTTP server started" );
}

void loop ( void ) {

  //postWSActions
  if (millis() - previousMillis >= wifiledoffinterval) {
    digitalWrite(PinWiFiLED, LOW);
  }

  // Button
  handleButton();
  
  // Webserver & Debug
  server.handleClient();

  // Serial to debug
//  if (Roomba.available() > 0) {
//      rdebugA("%s", Roomba.read());
//  }

  // Remote Debug
  if (cfg.telnet) {
    Debug.handle();
  }
}

void handleButton() {
  bool inp = digitalRead(PinPushBtn);
  if (inp == 0) {
    if (inp != inp_status) {
      rdebugA("Button pressed %s", "\n");
      Serial.println("Button pressed short");
      buttonTimer = millis();
    }
    if ((millis() - buttonTimer >= longPressTime)) {
         Serial.println("Button pressed long");
        eraseConfig();
        ESP.reset();
      }
    
  }
  inp_status = inp;
}

void HTMLHeader(char* section, int refresh, char* url) {

  char title[50];
  char hostname[50];
  WiFi.hostname().toCharArray(hostname, 50);
  snprintf(title, 50, "Roomba@%s - %s", hostname, section);

  html = "<!DOCTYPE html>";
  html += "<html>\n";
  html += "<head>\n";
  html += "<meta name='viewport' content='width=600' />\n";
  if (refresh != 0) {
    html += "<META http-equiv='refresh' content='";
    html += refresh;
    html += ";URL=";
    html += url;
    html += "'>\n";
  }
  html += "<title>";
  html += title;
  html += "</title>\n";
  html += "<style>\n";
  html += "body {\n";
  html += " background-color: #EDEDED;\n";
  html += " font-family: Arial, Helvetica, Sans-Serif;\n";
  html += " Color: #333;\n";
  html += "}\n";
  html += "\n";
  html += "h1 {\n";
  html += "  background-color: #333;\n";
  html += "  display: table-cell;\n";
  html += "  margin: 20px;\n";
  html += "  padding: 20px;\n";
  html += "  color: white;\n";
  html += "  border-radius: 10px 10px 0 0;\n";
  html += "  font-size: 20px;\n";
  html += "}\n";
  html += "\n";
  html += "ul {\n";
  html += "  list-style-type: none;\n";
  html += "  margin: 0;\n";
  html += "  padding: 0;\n";
  html += "  overflow: hidden;\n";
  html += "  background-color: #333;\n";
  html += "  border-radius: 0 10px 10px 10px;";
  html += "}\n";
  html += "\n";
  html += "li {\n";
  html += "  float: left;\n";
  html += "}\n";
  html += "\n";
  html += "li a {\n";
  html += "  display: block;\n";
  html += "  color: #FFF;\n";
  html += "  text-align: center;\n";
  html += "  padding: 16px;\n";
  html += "  text-decoration: none;\n";
  html += "}\n";
  html += "\n";
  html += "li a:hover {\n";
  html += "  background-color: #111;\n";
  html += "}\n";
  html += "\n";
  html += "#main {\n";
  html += "  padding: 20px;\n";
  html += "  background-color: #FFF;\n";
  html += "  border-radius: 10px;\n";
  html += "  margin: 10px 0;\n";
  html += "}\n";
  html += "\n";
  html += "#footer {\n";
  html += "  border-radius: 10px;\n";
  html += "  background-color: #333;\n";
  html += "  padding: 10px;\n";
  html += "  color: #FFF;\n";
  html += "  font-size: 12px;\n";
  html += "  text-align: center;\n";
  html += "}\n";
  
  html += "table  {\n";
  html += "border-spacing: 0;\n";
  html += "}\n";

  html += "table td, table th {\n";
  html += "padding: 5px;\n";
  html += "}\n";
  
  html += "table tr:nth-child(even) {\n";
  html += "background: #EDEDED;\n";
  html += "}";

  
  html += "input[type=\"submit\"] {\n";
  html += "background-color: #333;\n";
  html += "border: none;\n";
  html += "color: white;\n";
  html += "padding: 5px 25px;\n";
  html += "text-align: center;\n";
  html += "text-decoration: none;\n";
  html += "display: inline-block;\n";
  html += "font-size: 16px;\n";
  html += "margin: 4px 2px;\n";
  html += "cursor: pointer;\n";
  html += "}\n";
  
  html += "input[type=\"submit\"]:hover {\n";
  html += "background-color:#4e4e4e;\n";
  html += "}\n";
  
  html += "input[type=\"submit\"]:disabled {\n";
  html += "opacity: 0.6;\n";
  html += "cursor: not-allowed;\n";
  html += "}\n";

  
  html += "</style>\n";
  html += "</head>\n";
  html += "<body>\n";
  html += "<h1>";
  html += title;
  html += "</h1>\n";
  html += "<ul>\n";
  html += "<li><a href='/'>Home</a></li>\n";
  html += "<li><a href='/status'>Status</a></li>\n";
  html += "<li><a href='/switch'>Switch</a></li>\n";
  html += "<li><a href='/settings'>Settings</a></li>\n";
  html += "<li><a href='/wifiscan'>WiFi Scan</a></li>\n";
  html += "<li><a href='/fwupdate'>FW Update</a></li>\n";
  html += "<li><a href='/reboot'>Reboot</a></li>\n";
  html += "</ul>\n";
  html += "<div id='main'>";
}

void HTMLFooter() {
  html += "</div>";
  html += "<div id='footer'>&copy; 2018 Fabian Otto - Firmware v";
  html += firmware;
  html += " Compiled: ";
  html += compile_date;
  html += "</div>\n";
  html += "</body>\n";
  html += "</html>\n";

}

void handleRoot() {
  postWSActions();

  HTMLHeader("Main");

  html += "<table>\n";

  char uptime[20];
  int sec = millis() / 1000;
  int min = sec / 60;
  int hr = min / 60;
  int days = hr / 24;
  snprintf(uptime, 20, " %02d:%02d:%02d:%02d", days, hr % 24, min % 60, sec % 60);

  html += "<tr>\n<td>Uptime</td>\n<td>";
  html += uptime;
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Firmware</td>\n<td>v";
  html += firmware;
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Compiled</td>\n<td>";
  html += compile_date;
  html += "</td>\n</tr>\n";

//  html += "<tr>\n<td>Switch State</td>\n<td>";
//  html += (relay_status ? "ON" : "OFF");
//  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Note</td>\n<td>";
  if(strcmp(cfg.note, "") == 0) {
     html += "---";
  } else {
     html += cfg.note;
  }
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Hostname</td>\n<td>";
  html += WiFi.hostname().c_str();
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>IP</td>\n<td>";
  html += WiFi.localIP().toString();
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Gateway</td>\n<td>";
  html += WiFi.gatewayIP().toString();
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Subnetmask</td>\n<td>";
  html += WiFi.subnetMask().toString();
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>MAC</td>\n<td>";
  html += WiFi.macAddress().c_str();
  html += "</td>\n</tr>\n";

  html += "<tr>\n<td>Signal strength</td>\n<td>";
  html += dBm2Quality(WiFi.RSSI());
  html += "% (";
  html += WiFi.RSSI();
  html += "dBm)</td>\n</tr>\n";

  html += "<tr>\n<td>Telnet</td>\n<td>";
  html += (cfg.telnet == 1 ? "On" : "Off");
  html += " (Active: ";
  html += Debug.isActive(Debug.ANY);
  html += ")</td>\n</tr>\n";
  
  html += "</table>\n";
  
  HTMLFooter();
  server.send(200, "text/html", html);
}

void handleSettings() {
  postWSActions();
  // HTTP Auth
  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {
    boolean saveandreboot = false;
    String value;
    if (server.method() == HTTP_POST) { // Save Settings

      // Telnet - disable first and update only when on is in form data because its a checkbox
      cfg.telnet = 0;

      for ( uint8_t i = 0; i < server.args(); i++ ) {
        // Trim String
        value = server.arg(i);
        value.trim();

        // RF Note
        if (server.argName(i) == "note") {
          value.toCharArray(cfg.note, 30);

          // HTTP Auth Useraccess Username
        } else if (server.argName(i) == "api_username") {
          value.toCharArray(cfg.api_username, 30);

          // HTTP Auth Useraccess Password
        } else if (server.argName(i) == "api_password") {
          value.toCharArray(cfg.api_password, 30);

          // HTTP Auth Adminaccess Username
        } else if (server.argName(i) == "admin_username") {
          value.toCharArray(cfg.admin_username, 30);

          // HTTP Auth Adminaccess Password
        } else if (server.argName(i) == "admin_password") {
          value.toCharArray(cfg.admin_password, 30);
          
          // WiFi SSID
        } else if (server.argName(i) == "ssid") {
          value.toCharArray(cfg.wifi_ssid, 30);
          
          // WiFi PSK
        } else if (server.argName(i) == "psk") {
          value.toCharArray(cfg.wifi_psk, 30);

           // Hostname
        } else if (server.argName(i) == "hostname") {
          value.toCharArray(cfg.hostname, 30);
          
          // Telnet
        } else if (server.argName(i) == "telnet") {
          cfg.telnet = 1;
        }
        saveandreboot = true;
      }
    }

    if (saveandreboot) {
      HTMLHeader("Settings", 10, "/settings");
      html += ">>> New Settings saved! Device will be reboot <<< ";
    } else {
      HTMLHeader("Settings");

      html += "Current Settings Source is ";
      html += (configIsDefault ? "NOT " : "");
      html += "from EEPROM.<br />";
      html += "<br />\n";

      html += "<form action='/settings' method='post'>\n";
      html += "<table>\n";
      html += "<tr>\n";
      html += "<td>Hostname:</td>\n";
      html += "<td><input name='hostname' type='text' maxlength='30' autocapitalize='none' placeholder='";
      html += WiFi.hostname().c_str();
      html += "' value='";
      html += cfg.hostname;
      html += "'></td></tr>\n";

      html += "<tr>\n<td>\nSSID:</td>\n";
      html += "<td><input name='ssid' type='text' autocapitalize='none' maxlength='30' value='";
      bool showssidfromcfg = true;
      if (server.method() == HTTP_GET) {
        if(server.arg("ssid") != "") {
          html += server.arg("ssid");
          showssidfromcfg = false;
        }
      }
      if(showssidfromcfg) {
        html += cfg.wifi_ssid;
      }
      html += "'> <a href='/wifiscan' onclick='return confirm(\"Go to scan side? Changes will be lost!\")'>Scan</a></td>\n</tr>\n";

      html += "<tr>\n<td>\nPSK:</td>\n";
      html += "<td><input name='psk' type='password' maxlength='30' value='";
      html += cfg.wifi_psk;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nNote:</td>\n";
      html += "<td><input name='note' type='text' maxlength='30' value='";
      html += cfg.note;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nAPI Username:</td>\n";
      html += "<td><input name='api_username' type='text' maxlength='30' autocapitalize='none' value='";
      html += cfg.api_username;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nAPI Password:</td>\n";
      html += "<td><input name='api_password' type='password' maxlength='30' value='";
      html += cfg.api_password;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nAdminaccess Username:</td>\n";
      html += "<td><input name='admin_username' type='text' maxlength='30' autocapitalize='none' value='";
      html += cfg.admin_username;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nAdminaccess Password:</td>\n";
      html += "<td><input name='admin_password' type='password' maxlength='30' value='";
      html += cfg.admin_password;
      html += "'></td>\n</tr>\n";

      html += "<tr>\n<td>\nEnable Telnet:</td>\n";
      html += "<td><input type='checkbox' name='telnet' ";
      html += (cfg.telnet ? "checked" : "");
      html += "></td>\n</tr>\n";
      
      html += "</table>\n";
      
      html += "<br />\n";
      html += "<input type='submit' value='Save'>\n";
      html += "</form>\n";

    }
    HTMLFooter();
    server.send ( 200, "text/html", html );

    if (saveandreboot) {
      saveConfig();
      ESP.reset();
    }
  }
}

void handleSwitch() {
  postWSActions();
  int charge = 0;
  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {

    if (server.method() == HTTP_POST) {
      for ( uint8_t i = 0; i < server.args(); i++ ) {
        if (server.argName(i) == "switch") {
          if (server.arg(i) == "Wake") {
            rmb_cmd(RMB_WAKE);
          } else if (server.arg(i) == "Start") {
            rmb_cmd(RMB_START);
          } else if (server.arg(i) == "Max") {
            rmb_cmd(RMB_MAX);
          } else if (server.arg(i) == "Stop") {
            rmb_cmd(RMB_STOP);
          } else if (server.arg(i) == "Spot") {
            rmb_cmd(RMB_SPOT);
          } else if (server.arg(i) == "Dock") {
            rmb_cmd(RMB_DOCK);
          } else if (server.arg(i) == "Test") {
              getRoombaSensorPackets();
          }
        }
      }
    }
    
    HTMLHeader("Switch Socket");
    html += "<form method='POST' action='/switch'>";
    html += "<input type='submit' name='switch' value='Wake'>";
    html += "<input type='submit' name='switch' value='Start'>";
    html += "<input type='submit' name='switch' value='Max'>";
    html += "<input type='submit' name='switch' value='Stop'>";
    html += "<input type='submit' name='switch' value='Spot'>";
    html += "<input type='submit' name='switch' value='Dock'>";
    html += "<input type='submit' name='switch' value='Test'>";
    html += "</form>";
    
    HTMLFooter();
    server.send ( 200, "text/html", html );
  }
}

void handleStatus() {
  postWSActions();

  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {
    String packetID;
    int packetIDResult;
   
    if (server.method() == HTTP_POST) {
      for ( uint8_t i = 0; i < server.args(); i++ ) {
        if (server.argName(i) == "packetid") {
          
          packetID = server.arg(i);
          packetID.trim();
          rdebugA("PackedID: %s (%i)\n", packetID.c_str(), packetID.toInt());
          packetIDResult = getRoombaSensorPacket(char(packetID.toInt()));
        }
      }
    }
    
    HTMLHeader("Status");
    html += "<form method='POST' action='/status'><br />";
    html += "<input type='text' name='packetid' value='";
    html += packetID;
    html += "'>";
    html += "<input type='submit' name='send' value='send'>";
    if (server.method() == HTTP_POST) {
      html += "<br /><br />Result: ";
      html += packetIDResult;
    }
    html += "</form>";
    
    HTMLFooter();
    server.send ( 200, "text/html", html );
  }
}

void handleWiFiScan() {
  postWSActions();
  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {
    
    HTMLHeader("WiFi Scan");
    
    int n = WiFi.scanNetworks();
    if (n == 0) {
       html += "No networks found.\n";
    } else {
      html += "<table>\n";
      html += "<tr>\n";
      html += "<th>#</th>\n";
      html += "<th>SSID</th>\n";
      html += "<th>Channel</th>\n";
      html += "<th>Signal</th>\n";
      html += "<th>RSSI</th>\n";
      html += "<th>Encryption</th>\n";
      html += "<th>BSSID</th>\n";
      html += "</tr>\n";
      for (int i = 0; i < n; ++i) {
        html += "<tr>\n";
        snprintf(buff, sizeof(buff), "%02d", (i+1));
        html += String("<td>") + buff + String("</td>");
        html += "<td>\n";
        if(WiFi.isHidden(i)) {
          html += "[hidden SSID]";
        } else {
          html += "<a href='/settings?ssid=";
          html += WiFi.SSID(i).c_str();
          html += "'>";
          html += WiFi.SSID(i).c_str();
          html += "</a>";
        }
        html += "</td>\n<td>";
        html += WiFi.channel(i);
        html += "</td>\n<td>";
        html += dBm2Quality(WiFi.RSSI(i));
        html += "%</td>\n<td>";
        html += WiFi.RSSI(i);
        html += "dBm</td>\n<td>";
        switch (WiFi.encryptionType(i)) {
          case ENC_TYPE_WEP: // 5
            html += "WEP";
            break;
          case ENC_TYPE_TKIP: // 2
            html += "WPA TKIP";
            break;
          case ENC_TYPE_CCMP : // 4
            html += "WPA2 CCMP";
            break;
          case ENC_TYPE_NONE : // 7
            html += "OPEN";
            break;
          case ENC_TYPE_AUTO: // 8
            html += "WPA";
            break;
        }
        html += "</td>\n<td>";
        html += WiFi.BSSIDstr(i).c_str();
        html += "</td>\n";
        html += "</tr>\n";
      }
      html += "</table>";
    }
    
    HTMLFooter();
    
    server.send ( 200, "text/html", html );
  }
}

void handleReboot() {
  postWSActions();
  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {
    boolean reboot = false;
    if (server.method() == HTTP_POST) {
      HTMLHeader("Reboot", 10, "/");
      html += "Reboot in progress...";
      reboot = true;
    } else {
      HTMLHeader("Reboot");
      html += "<form method='POST' action='/reboot'>";
      html += "<input type='submit' value='Reboot'>";
      html += "</form>";
    }
    HTMLFooter();
    
    server.send ( 200, "text/html", html );
    
    if (reboot) {
      delay(200);
      ESP.reset();
    }
  }
}

void handleFWUpdate() {
  postWSActions();
  if (!server.authenticate(cfg.admin_username, cfg.admin_password)) {
    return server.requestAuthentication();
  } else {
    HTMLHeader("Firmware Update");

    html += "<form method='POST' action='/dofwupdate' enctype='multipart/form-data'>\n";
    html += "<table>\n";
    html += "<tr>\n";
    html += "<td>Current Version</td>\n";
    html += String("<td>") + firmware + String("</td>\n");
    html += "</tr>\n";
    html += "<tr>\n";
    html += "<td>Compiled</td>\n";
    html += String("<td>") + compile_date + String("</td>\n");
    html += "</tr>\n";
    html += "<tr>\n";
    html += "<td>Upload</td>\n";
    html += "<td><input type='file' name='update'></td>\n";
    html += "</tr>\n";
    html += "</table>\n";
    html += "<br />";
    html += "<input type='submit' value='Update'>";
    html += "</form>";
    HTMLFooter();
    server.send ( 200, "text/html", html );
  }
}

void handleNotFound() {
  postWSActions();
  HTMLHeader("File Not Found");
  html += "URI: ";
  html += server.uri();
  html += "<br />\nMethod: ";
  html += ( server.method() == HTTP_GET ) ? "GET" : "POST";
  html += "<br />\nArguments: ";
  html += server.args();
  html += "<br />\n";
  HTMLFooter();
  for ( uint8_t i = 0; i < server.args(); i++ ) {
    html += " " + server.argName ( i ) + ": " + server.arg ( i ) + "<br />\n";
  }

  server.send ( 404, "text/html", html );

}

void handleAPI(commands cmd) {
//  postWSActions();
//  // HTTP Auth
//  if (!server.authenticate(cfg.api_username, cfg.api_password)) {
//    return server.requestAuthentication();
//  } else {
//    switch (cmd) {
//      case CMD_ON:
//        setRelay(true);
//        break;
//      case CMD_OFF:
//        setRelay(false);
//        break;
//      case CMD_TOGGLE:
//        setRelay(!relay_status);
//        break;
//      default:
//        break;
//    }
//    genHTMLstatus();
//  }
}

void postWSActions() {
  // Blink LED
  digitalWrite(PinWiFiLED, HIGH);
  previousMillis =  millis();

  // Log Access to telnet
  rdebugA("Webserver %s access to %s\n", (server.method() == HTTP_GET ? "GET" : "POST"), server.uri().c_str());
}

void genHTMLstatus() {
//  String out = "";
//  if (relay_status) {
//    out += "1";
//  } else {
//    out += "0";
//  }
//  server.send ( 200, "text/plain", out );
}

//void setRelay(bool new_status) {
//  relay_status = new_status;
//
//  if (relay_status) {
//    digitalWrite(PinRelayOn, 0);
//    delay(50);
//    digitalWrite(PinRelayOn, 1);
//  } else {
//    digitalWrite(PinRelayOff, 0);
//    delay(50);
//    digitalWrite(PinRelayOff, 1);
//  }
//
//  rdebugA("relay %s", (relay_status ? "on" : "off"));
//}

void loadDefaults() {
  String TmpStr = "";

  // Config NOT from EEPROM
  configIsDefault = true;

  // Valid-Falg to verify config
  cfg.configisvalid = 1;

  // Note
  TmpStr = "";
  TmpStr.toCharArray(cfg.note, 30);

  // HTTP Auth Settings
  TmpStr = "api";
  TmpStr.toCharArray(cfg.api_username, 30);
  TmpStr.toCharArray(cfg.api_password, 30);
  TmpStr = "admin";
  TmpStr.toCharArray(cfg.admin_username, 30);
  TmpStr.toCharArray(cfg.admin_password, 30);

  // Telnet
  cfg.telnet = 0;

  // Wifi
  TmpStr = "";
  TmpStr.toCharArray(cfg.wifi_ssid, 30);
  TmpStr.toCharArray(cfg.wifi_psk, 30);

  // Hostname
  TmpStr = WiFi.hostname().c_str();
  TmpStr.toCharArray(cfg.hostname, 30);
}

void loadConfig() {
  Serial.println("loadConfig!");
  EEPROM.begin(512);
  EEPROM.get( cfgStart, cfg );
  EEPROM.end();

  if (cfg.configisvalid != 1) {
    loadDefaults();
  } else {
    configIsDefault = false;  // Config from EEPROM
  }
}

void saveConfig() {
  EEPROM.begin(512);
  EEPROM.put( cfgStart, cfg );
  delay(200);
  EEPROM.commit();                      // Only needed for ESP8266 to get data written
  EEPROM.end();
}

void eraseConfig() {
  EEPROM.begin(512);
  for (int i = cfgStart ; i < sizeof(cfg) ; i++) {
    EEPROM.write(i, 0);
  }
  delay(200);
  EEPROM.commit();
  EEPROM.end();
}

long dBm2Quality(long dBm) {
  if(dBm <= -100)
    return 0;
  else if(dBm >= -50)
    return 100;
  else
    return 2 * (dBm + 100);
}

void rmb_cmd(commands cmd) {

  switch (cmd) {
    case RMB_WAKE:
      rdebugV("rmb_cmd(RMB_WAKE)\n");
      digitalWrite(Wake_Pin, HIGH);
      delay(100);
      digitalWrite(Wake_Pin, LOW);
      delay(500);
      digitalWrite(Wake_Pin, HIGH);
      delay(100);
      break;
    case RMB_START:
      rdebugVln("rmb_cmd(RMB_START)");
      rmb_cmd(RMB_WAKE);
      rdebugVln("Starting");
      Roomba.write(128); //Start
      delay(50);
      Roomba.write(131); //Safe mode
      delay(50);
      Roomba.write(135); // Clean
      rdebugVln("I will clean master");
      break;
    case RMB_MAX:
      rdebugVln("rmb_cmd(RMB_MAX)");
      rmb_cmd(RMB_WAKE);
      rdebugVln("Starting");
      Roomba.write(128);
      delay(50);
      Roomba.write(131);
      delay(50);
      Roomba.write(136);
      rdebugVln("Maximum cleaning");
      break;
    case RMB_STOP:
      rdebugVln("rmb_cmd(RMB_STOP)");
      //rmb_cmd(RMB_WAKE);
      Roomba.write(128);
      delay(50);
      Roomba.write(131);
      delay(50);
      Roomba.write(133);
      rdebugVln("STOP");
      break;
    case RMB_SPOT:
      rdebugVln("rmb_cmd(RMB_SPOT)");
      rmb_cmd(RMB_WAKE);
      Roomba.write(128);
      delay(50);
      Roomba.write(131);
      delay(50);
      Roomba.write(134);
      rdebugVln("Spot cleaning");
      break;
   case RMB_DOCK:
      rdebugVln("rmb_cmd(RMB_SPOT)");
      rmb_cmd(RMB_WAKE);
      Roomba.write(128);
      delay(50);
      Roomba.write(131);
      delay(50);
      Roomba.write(143);
      rdebugVln("Thank you for letting me rest, going home master");
      break;
    default:
      break;
  }

}

void updateSensors(byte packet) {
// Roomba.print(142);
// Roomba.print(packet);  
// delay(100); // wait for sensors
// char i = 0;
// 
// while(Roomba.available()) {
//   int c = Roomba.read();
//   if( c==-1 ) {
//      rdebugA("Sensor Errror! %i\n", c);
//   }
//   sensorbytes[i++] = c;
// }
//
// rdebugA("VOLTAGE: %s\n", VOLTAGE);
// rdebugA("VOLTAGE: %i\n", VOLTAGE);
// rdebugA("VOLTAGE: %c\n", VOLTAGE);
// 
// if(i < 6) {     // Size of smallest sensor packet is 6
//   rdebugA("Sensor Errrrrror! %i\n", i);
// }
}

void getRoombaSensorPackets() {
  
  Roomba.flush();
  
  rmb_cmd(RMB_WAKE);
  Roomba.write(142);
  delay(50);
  Roomba.write(3);
  delay(100);

  if (Roomba.available() > 0) {
    rdebugA("Es gibt etwas zu lesen! %i\n", Roomba.available());
    char i = 0;
     
     while(Roomba.available()) {
       int c = Roomba.read();
       sensorbytes[i++] = c;
     }
     rdebugA("CHARGE_STATE: %i\n", CHARGE_STATE);
     rdebugA("VOLTAGE: %i\n", VOLTAGE);
     rdebugA("CURRENT: %i\n", CURRENT);
     rdebugA("TEMP: %i\n", TEMP);
     rdebugA("CHARGE: %i\n", CHARGE);
     rdebugA("CAPACITY: %i\n", CAPACITY);
     
  } else {
    rdebugA("Es gibt nichts zu lesen! %s\n", "");
  }
}

unsigned int getRoombaSensorPacket(char PacketID) {

  int low = 0;
  int high = 0;

  Roomba.flush();
  
  rmb_cmd(RMB_WAKE);
  
  Roomba.write(142);
  delay(50);
  Roomba.write(PacketID);
  delay(50);

  if (Roomba.available() > 0) {
    rdebugA("Es gibt etwas zu lesen! %i\n", Roomba.available());
    if (Roomba.available() == 1) {
      high = Roomba.read();
      rdebugA("Roomba.read: %i\n", high);
      return low;
    }else if (Roomba.available() == 2) {
      high = Roomba.read();
      low = Roomba.read();
      rdebugA("Roomba.read: %i (%i, %i)\n", (high*256 + low), high, low);
      rdebugA("Roomba.read: %i, %i\n", lowByte(high*256 + low), highByte(high*256 + low));
      rdebugA("Roomba.read: %i\n", (signed int)(low + (high << 8)));
      rdebugA("Roomba.read: %i\n", (unsigned int)(low + (high << 8)));
      return (high*256 + low);
    }
  } else {
    rdebugA("Es gibt nichts zu lesen! %s\n", "");
    return -1;
  }
}

  
